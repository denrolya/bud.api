<?php

namespace AppBundle\Repository;

use Carbon\Carbon;
use GuzzleHttp\Client;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends \Doctrine\ORM\EntityRepository
{

    public function getEventsGroupedByDate(Carbon $startDate = null, Carbon $endDate = null, $coordinates = null)
    {
        $startDate = ($startDate) ? $startDate->toDateString() : (new Carbon())->toDateString();

        $query = $this->createQueryBuilder('e')
            ->where('DATE(e.dateFrom) >= :startDay')
            ->orderBy('e.dateFrom')
            ->setParameter('startDay', $startDate);

        if($endDate) {
            $query = $query
                ->andWhere('DATE(e.dateFrom) <= :endDay')
                ->setParameter('endDay', $endDate->toDateString());
        }

        $events = $query->getQuery()->getResult();

        if ($coordinates) {
            $distances = $this->getDistanceToEvents($events, $coordinates);

            foreach ($distances->rows[0]->elements as $index => $distance) {
                $events[$index]->distance = $distance->distance->text;
                $events[$index]->distanceValue = $distance->distance->value;
            }
        }

        $eventsGrouped = [];
        foreach($events as $index => $event) {
            if (!array_key_exists($event->getDateFrom()->format('Y-m-d'), $eventsGrouped)) {
                $eventsGrouped[$event->getDateFrom()->format('Y-m-d')] = [];
            }
            array_push($eventsGrouped[$event->getDateFrom()->format('Y-m-d')], $event);
        }

        return $eventsGrouped;
    }
    
    public function getEventsGroupedByDateStartingFromToday($coordinates = null)
    {
        $startDate = new Carbon();
        $endDate = (new Carbon())->addWeek();

        return $this->getEventsGroupedByDate($startDate, $endDate, $coordinates);
    }

    public function getDistanceToEvent($event, $coordinates)
    {
        $client = new Client();
        $res = $client->request('GET', 'https://maps.googleapis.com/maps/api/distancematrix/json', [
            'query' => [
                'origins' => $coordinates['latitude'] .  ',' . $coordinates['longitude'],
                'destinations' => $event->getLatitude() . ',' . $event->getLongitude(),
                'key' => 'AIzaSyAXLxGDZW_gX__F9xjWFGScckUZ_Sw0xjY',
                'travelMode' => 'WALKING'
            ]
        ])->getBody();
        $res = json_decode($res, false);

        return $res->rows[0]->elements[0]->distance;
    }

    public function getDistanceToEvents($events, $coordinates)
    {
        $destinations = '';
        $eventsCount = count($events);
        foreach($events as $index => $event) {
            $destinations .= $event->getLatitude() . ',' . $event->getLongitude();
            if ($index != $eventsCount - 1) {
                $destinations .= '|';
            }
        }

        $client = new Client();
        $res = $client->request('GET', 'https://maps.googleapis.com/maps/api/distancematrix/json', [
            'query' => [
                'origins' => $coordinates['latitude'] .  ',' . $coordinates['longitude'],
                'destinations' => $destinations,
                'key' => 'AIzaSyAXLxGDZW_gX__F9xjWFGScckUZ_Sw0xjY',
                'travelMode' => 'WALKING'
            ]
        ])->getBody();
        $res = json_decode($res, false);

        return $res;
    }
}
